name: Spring Boot CI/CD

env:
  PROJECT_NAME: "dongguk-unibag"
  
on:
  push:
    branches: [ "develop" ]

jobs:
  build:
    name: Spring Boot CI/CD
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Add profiles
      run: |
          mkdir -p src/main/resources
          cd src/main/resources  
          echo "${{ secrets.APPLICATION_YAML}}" > application.yaml
          echo "${{ secrets.APPLICATION_COMMON_YAML}}" > application-common.yaml
          echo "${{ secrets.APPLICATION_DEV_YAML}}" > application-dev.yaml
          echo "${{ secrets.APPLE_AUTH_KEY}}" > ${{  secrets.AUTH_KEY_NAME}}.p8
          mkdir firebase
          ls -al
          cd ../../../

    - name: create-json
      uses: jsdaniell/create-json@v1.2.3
      with:
        name: "service-account.json"
        json: ${{ secrets.FCM_ACCOUNT_JSON }}
        dir: 'src/main/resources/firebase/'

    # Needs update to prod config echo "${{ secrets.APPLICATION_PROD_YAML}}" > application-prod.yaml
        
    - name: Gradle Caching
      uses: actions/cache@v3.4.2
      with:
        path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
            ${{ runner.os }}-gradle-


    - name: Grant Execute Permission For Gradlew
      run: chmod +x gradlew

    - name: Build with gradle
      run: ./gradlew build -x test

    - name: Find JAR file dynamically
      id: find_jar
      run: echo "JAR_FILE=$(ls build/libs/uni_bag_spring_boot_app-*.jar | grep -v 'plain' | head -n 1)" >> $GITHUB_ENV

    - name: copy file via ssh password
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        source: ${{ env.JAR_FILE }}
        target: ${{ secrets.TARGET_PATH }}
        strip_components: 2

  deploy:
    needs: build # "build" job이 성공해야만 deploy가 진행된다.
    runs-on: ubuntu-latest



    steps:
    - name: Set Green and Blue
      run: |
        CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.NGINX_IP }}/api/server/env")
        echo "현재 실행 중인 환경: $CURRENT_UPSTREAM"
        echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
        
        if [ "$CURRENT_UPSTREAM" = "blue" ]; then
          echo "STOPPED_UPSTREAM=green" >> $GITHUB_ENV
        elif [ "$CURRENT_UPSTREAM" = "green" ]; then
          echo "STOPPED_UPSTREAM=blue" >> $GITHUB_ENV
        else
          echo "🚨 오류: 현재 실행 중인 환경을 확인할 수 없습니다."
          exit 1
        fi

    - name: Start Stopped Server with Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          running=$(docker inspect --format='{{.State.Running}}' ${{ env.STOPPED_UPSTREAM }}-uni-bag 2>/dev/null || echo "false")
          if [[ "$running" == "true" ]]; then
            echo "컨테이너 중지 및 제거 중..."
            cd ~/Desktop/uni-bag/${{env.STOPPED_UPSTREAM}}
            docker-compose down
          else
           echo "실행중인 컨테이너가 없음"
          fi
          echo "🟢 ${{ env.STOPPED_UPSTREAM }} 환경을 실행합니다..."
          cd ~/Desktop/uni-bag/${{ env.STOPPED_UPSTREAM }}
          docker-compose up -d 

    - name: Check the deployed service URL
      uses: jtalk/url-health-check-action@v3
      with:
        url: https://${{ env.STOPPED_IP }}:${{ env.STOPPED_PORT }}/api/server/env
        # 총 5번 하는데, 15초의 간격을 두고함. 이때까지 응답이 정상이 아니라면 배포 실패
        max-attempts: 5
        retry-delay: 15s

    - name: Change nginx upstream
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script_stop: true
        # 여기서 -i가 아닌 -it로 진행하면 오류가 발생하고, -c가 없으면 도커가 아닌 호스트에서 경로를 찾는다. 주의
        script: |
          docker exec -i nginx bash -c 'echo "set \$service_env ${{ env.STOPPED_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && service nginx reload'

    - name: Terminate Current Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          running=$(docker inspect --format='{{.State.Running}}' ${{ env.CURRENT_UPSTREAM }}-uni-bag 2>/dev/null || echo "false")
          if [[ "$running" == "true" ]]; then
            echo "${{ env.CURRENT_UPSTREAM }} 컨테이너 중지 및 제거 중..."
            cd ~/Desktop/uni-bag/${{env.CURRENT_UPSTREAM}}
            docker-compose down
          else
            echo "실행중인 컨테이너가 없음"
          fi
